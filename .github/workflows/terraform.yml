name: terraform
on:
  pull_request:
    branches:
      - main
    paths:
      - "handler.py"
      - "create_package.py"
      - "Pipfile*"
      - "requirements.txt"
      - "terraform/**"
      - ".github/workflows/terraform.yml"
  push:
    branches:
      - main
    paths:
      - "handler.py"
      - "create_package.py"
      - "Pipfile*"
      - "terraform/**"
      - ".github/workflows/terraform.yml"
  schedule:
    - cron: "0 21 1 * 0"
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v6
        with:
          tflint_version: "latest"
          tflint_wrapper: false
      - name: Init TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}
        working-directory: ./terraform
      - name: Terraform linting
        id: tflint
        run: tflint -f compact --minimum-failure-severity notice
        working-directory: ./terraform
  terraform:
    if: ${{ github.event_name != 'schedule' }}
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      id-token: write
      contents: read
    env:
      lambda_package: ${{ vars.LAMBDA_PACKAGE}}
      TF_VAR_bucket_name: ${{ secrets.RSS_FEEDS_BUCKET }}
      TF_VAR_topic_name: ${{ secrets.RSS_FEEDS_TOPIC }}
      TF_VAR_alarm_topic_name: ${{ secrets.RSS_FEEDS_ALARM_TOPIC }}
      TF_VAR_rss_feeds_urls: ${{ vars.RSS_FEEDS_URLS }}
      TF_VAR_lambda_package_path: ${{ github.workspace}}/${{ vars.LAMBDA_PACKAGE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          architecture: "x64"
          cache: "pipenv"
          cache-dependency-path: Pipfile.lock
      - name: Install pipenv & create dependencies
        run: |
          pip install --prefer-binary -r requirements.txt
          pipenv install
          pipenv requirements > requirements.txt
      - name: Create deployment package
        run: python create_package.py --output ${{ vars.LAMBDA_PACKAGE }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform format
        run: terraform fmt -check
        working-directory: ./terraform
      - name: Terraform init
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
        working-directory: ./terraform
      - name: Terraform plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform
      - name: Terraform apply
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch')}}
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
