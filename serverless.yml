org: tsingis
app: rss-feeds
service: rss-feeds

provider:
  name: aws
  stage: ${opt:stage, "live"}
  runtime: python3.13
  runtimeManagement: auto
  versionFunctions: false
  architecture: x86_64
  region: ${opt:region, "eu-north-1"}
  memorySize: 256
  timeout: 30
  logRetentionInDays: 90
  environment:
    RSS_FEED_URLS: ${env:RSS_FEED_URLS}
    BUCKET_NAME: ${env:BUCKET_NAME}
    SNS_TOPIC_ARN: ${env:SNS_TOPIC_ARN}

functions:
  handler:
    handler: handler.handler
    role: arn:aws:iam::${aws:accountId}:role/RSSFeedLambdaFunctionRole

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    fileName: requirements.txt

package:
  patterns:
    - "!**"
    - "handler.py"

resources:
  Resources:
    SchedulerInvokeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: RSSFeedSchedulerInvokeRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: scheduler.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AllowLambdaInvoke
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: lambda:InvokeFunction
                  Resource:
                    Fn::GetAtt:
                      - HandlerLambdaFunction
                      - Arn
    RSSFeedScheduler:
      Type: AWS::Scheduler::Schedule
      Properties:
        Name: RSSFeedScheduler
        ScheduleExpression: cron(0 7 * * ? *)
        ScheduleExpressionTimezone: Europe/Helsinki
        FlexibleTimeWindow:
          Mode: OFF
        Target:
          RetryPolicy:
            MaximumRetryAttempts: 1
            MaximumEventAgeInSeconds: 900
          Arn:
            Fn::GetAtt:
              - HandlerLambdaFunction
              - Arn
          RoleArn:
            Fn::GetAtt:
              - SchedulerInvokeRole
              - Arn
